# Explication de l'Application Selfy Kiosk (selfy_v3)

## Vue d'ensemble
L'application Selfy Kiosk est une API RESTful développée avec FastAPI qui permet aux utilisateurs de prendre des selfies, d'appliquer des fonds d'écran et de partager leurs photos. L'application fonctionne en mode connecté (online) et déconnecté (offline) avec une synchronisation automatique.

## Structure des Fichiers Principaux

### 1. main.py
Point d'entrée principal de l'application qui configure et monte l'API FastAPI avec tous les routeurs nécessaires.

#### Fonctions Principales :

1. **Configuration de l'application**
   - Initialisation de FastAPI avec CORS et middlewares
   - Configuration des routes d'API
   - Gestion des erreurs globales

2. **Authentification**
   - `verify_token()`: Vérifie la validité du token JWT
   - `get_current_user()`: Récupère l'utilisateur connecté
   - `admin_login()`: Gère la connexion administrateur

3. **Gestion des Captures**
   - `create_capture()`: Crée une nouvelle capture photo
   - `download_photo()`: Permet de télécharger une photo
   - `list_captures()`: Liste les captures avec filtrage

4. **Gestion des Fonds d'écran**
   - `list_backgrounds()`: Liste les fonds disponibles
   - `upload_background()`: Téléverse un nouveau fond
   - `delete_background()`: Supprime un fond

5. **Administration**
   - `get_config()`: Récupère la configuration
   - `update_config()`: Met à jour la configuration
   - `get_stats()`: Affiche les statistiques
   - `export_data()`: Exporte les données en Excel

6. **Tests**
   - `test_vps_connection()`: Teste la connexion au VPS
   - `test_sms_service()`: Teste le service SMS

### 2. Routers/
Définit les routes et la logique métier dans des modules séparés.

#### a. captures.py
Gère toutes les opérations liées aux captures photo.

**Fonctions principales :**
- `create_capture()`: Traite une nouvelle capture
- `process_capture_online()`: Traite les captures en mode connecté
- `send_sms()`: Envoie un SMS avec le lien de téléchargement
- `download_photo()`: Télécharge une photo via son token
- `get_qr_code()`: Génère un QR code pour le téléchargement
- `list_captures()`: Liste les captures avec pagination
- `delete_capture()`: Supprime une capture
- `retry_sync_capture()`: Relance la synchronisation d'une capture

#### b. backgrounds.py
Gère les fonds d'écran disponibles pour les selfies.

#### c. sms.py
Gère l'envoi de SMS via différents fournisseurs.

#### d. storage.py
Gère le stockage des fichiers localement et à distance.

#### e. config.py
Gère la configuration de l'application.

#### f. health.py
Endpoints de vérification de la santé de l'API.

## Fonctionnement Global

1. **Capture de Photo**
   - L'utilisateur prend une photo via l'interface
   - La photo est enregistrée localement
   - Un token de téléchargement est généré
   - La photo est traitée en arrière-plan

2. **Traitement**
   - En mode online: Upload immédiat vers le stockage distant
   - En mode offline: Mise en file d'attente pour synchronisation ultérieure
   - Application du fond d'écran si sélectionné

3. **Partage**
   - Génération d'un lien de téléchargement
   - Envoi par SMS si un numéro est fourni
   - Génération d'un QR code

4. **Administration**
   - Gestion des fonds d'écran
   - Visualisation des statistiques
   - Configuration du système
   - Export des données

## Sécurité
- Authentification JWT
- Validation des entrées utilisateur
- Gestion des permissions
- Protection contre les attaques par injection

## Architecture Technique
- **Backend**: FastAPI (Python 3.8+)
- **Base de données**: SQLite/PostgreSQL via SQLAlchemy
- **Stockage**: Système de fichiers local + Stockage objet (S3 compatible)
- **Cache**: Redis (pour les sessions et le cache)
- **File d'attente**: RQ (Redis Queue) pour le traitement asynchrone

## Différences entre main.py et captures.py

### main.py
1. **Rôle** : Point d'entrée principal de l'application
2. **Responsabilités** :
   - Configuration initiale de l'application FastAPI
   - Définition des middlewares (CORS, etc.)
   - Montage des routeurs
   - Gestion de l'authentification globale
   - Définition des modèles Pydantic principaux
   - Gestion des erreurs globales
3. **Contenu** :
   - Configuration de base de l'API
   - Routes principales et endpoints d'authentification
   - Logique métier minimale, délègue aux routeurs
   - Gestion des dépendances globales

### captures.py
1. **Rôle** : Module de gestion des captures photo
2. **Responsabilités** :
   - Traitement des photos (upload, téléchargement)
   - Gestion des opérations CRUD sur les captures
   - Gestion de la file d'attente de synchronisation
   - Validation des entrées spécifiques aux captures
3. **Contenu** :
   - Logique métier spécifique aux captures
   - Fonctions de traitement asynchrone
   - Gestion des états (en ligne/hors ligne)
   - Intégration avec les services (stockage, SMS)

### Points clés de différenciation
- **Séparation des préoccupations** : main.py gère la configuration globale, captures.py gère la logique spécifique aux captures
- **Évolutivité** : La séparation en modules permet une meilleure maintenabilité
- **Réutilisabilité** : Les fonctions de captures.py peuvent être utilisées par d'autres parties de l'application
- **Testabilité** : Le code est plus facile à tester unitairement

## Points Forts
- Fonctionnement hors-ligne
- Interface d'administration complète
- Gestion des erreurs robuste
- Journalisation détaillée
- Architecture modulaire et extensible
