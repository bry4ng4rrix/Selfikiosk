#!/usr/bin/env python3
"""
Version simplifi√©e de main.py pour d√©marrage initial
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import logging
import os
from datetime import datetime

# Configuration basique
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Cr√©er les dossiers n√©cessaires
os.makedirs("uploads", exist_ok=True)
os.makedirs("logs", exist_ok=True)

# Application FastAPI minimale
app = FastAPI(
    title="Selfie Kiosk API - Simple",
    description="Version simplifi√©e pour d√©marrage",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS basique
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    """Page d'accueil"""
    return {
        "name": "Selfie Kiosk API - Simple",
        "version": "1.0.0",
        "status": "running",
        "timestamp": datetime.now(),
        "docs": "/docs"
    }

@app.get("/health")
async def health_check():
    """Check de sant√© simple"""
    return {
        "status": "healthy",
        "timestamp": datetime.now(),
        "message": "API is running"
    }

@app.get("/test")
async def test_endpoint():
    """Endpoint de test"""
    return {
        "test": "success",
        "message": "L'API fonctionne correctement !",
        "timestamp": datetime.now()
    }

# Test des imports principaux
@app.get("/debug/imports")
async def debug_imports():
    """Debug des imports"""
    results = {}
    
    # Test config
    try:
        from settings import settings  # Chang√© de config vers settings
        results["config"] = "‚úÖ OK"
    except Exception as e:
        results["config"] = f"‚ùå {str(e)}"
    
    # Test database
    try:
        from database import Database
        results["database"] = "‚úÖ OK"
    except Exception as e:
        results["database"] = f"‚ùå {str(e)}"
    
    # Test models
    try:
        from models import BaseResponse
        results["models"] = "‚úÖ OK"
    except Exception as e:
        results["models"] = f"‚ùå {str(e)}"
    
    # Test Redis
    try:
        import redis
        r = redis.from_url("redis://localhost:6379/0")
        r.ping()
        results["redis"] = "‚úÖ OK"
    except Exception as e:
        results["redis"] = f"‚ùå {str(e)}"
    
    return {
        "import_tests": results,
        "timestamp": datetime.now()
    }

@app.exception_handler(Exception)
async def general_exception_handler(request, exc: Exception):
    """Gestionnaire d'erreurs g√©n√©ral"""
    logger.error(f"Unhandled exception: {str(exc)}")
    return JSONResponse(
        status_code=500,
        content={
            "error": True,
            "message": str(exc),
            "type": type(exc).__name__
        }
    )

if __name__ == "__main__":
    import uvicorn
    print("üöÄ D√©marrage Selfie Kiosk - Mode Simple")
    uvicorn.run(
        "simple_main:app",
        host="127.0.0.1",
        port=8000,
        reload=True,
        log_level="info"
    )